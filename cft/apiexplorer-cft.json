{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Palo Alto Networks Application Framework API Explorer Standalone",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Basic Configuration - REQUIRED"
					},
					"Parameters": [
						"AdminPassword",
						"ServerKeyName",
						"AppHostedZone",	
						"LetsEncryptEmail"
					]
				},
				{
					"Label": {
						"default": "Advanced Configuration"
					},
					"Parameters": [
						"ConfigureRoute53",
						"APIExplorerLetsEncryptCert",	
						"APIExplorerHostname",
						"APIExplorerScriptURL",
						"APIExplorerPackageURL",
						"APIExplorerGitHubRepo"						
					]
				}				
			],
			"ParameterLabels": {
				"ServerKeyName": {
				  "default": "EC2 VM Key Name"
				},
				"AdminPassword": {
					"default": "Admin Password"
				},
				"AppHostedZone": {
					"default": "DNS Domain Name"
				},
				"APIExplorerHostname":{
					"default": "API Explorer Hostname"
				},
				"APIExplorerScriptURL":{
					"default": "API Explorer Script URL"
				},
				"APIExplorerPackageURL":{
					"default": "API Explorer Package URL"
				},
				"APIExplorerGitHubRepo":{
					"default": "API Explorer GitHub Repo"
				},
				"ConfigureRoute53": {
					"default": "Configure Route53"
				},
				"APIExplorerLetsEncryptCert": {
					"default": "Create API Explorer LetsEncrypt Cert"
				}
			}
		}
	},
	"Parameters": {
	
		"ServerKeyName": {
		  "Description": "Name of an existing EC2 KeyPair to enable SSH access to the VM",
		  "Type": "AWS::EC2::KeyPair::KeyName"
		},


		"AdminPassword": {
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"Description": "Password for API Explorer Must be at least 8 characters containing letters, numbers and symbols",
			"MaxLength": "32",
			"MinLength": "8",
			"NoEcho": "true",
			"Type": "String"
		},

		"AppHostedZone": {
			"Description": "DNS Domain Name or Route53 Hosted Zone Name (i.e. panwlab.mycompany.com)",
			"Type": "String"
		},

		"APIExplorerHostname":{
			"Description": "API Explorer Hostname",
			"Type": "String",
			"Default": "apiexplorer"		
		},

		"APIExplorerScriptURL":{
			"Description": "API Explorer Configuration Script File Path",
			"Type": "String",
			"Default": "https://gist.githubusercontent.com/fvigo/1c02e93bdb38c06f8f584ff288f7b7c1/raw/ea241fe274672b7924bb9c459978f72b866147fc/apiexplorer.sh.txt"
		},
		
		"APIExplorerPackageURL":{
			"Description": "API Explorer Software Package URL",
			"Type": "String",
			"Default": "https://paloaltonetworks.box.com/shared/static/29mliapljdvt1njyi8jotupkku9yewjt"
		},
		"APIExplorerGitHubRepo":{
			"Description": "API Explorer GitHub Repository URL",
			"Type": "String",
			"Default": "https://github.com/PaloAltoNetworks/apiexplorer.git"
		},

		"ConfigureRoute53": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Dynamically map hostnames to EIPs using Route53?",
			"Type": "String"
		},

		"APIExplorerLetsEncryptCert": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Create Letsencrypt certificate for API Explorer? (REQUIRES Route53 DNS Configuration to be enabled)",
			"Type": "String"
		},
		"LetsEncryptEmail": {
			"Description": "Email address to provide to Letsencrypt for API Explorer SSL certificate generation (i.e. user@mycompany.com)",
			"Type": "String"
		}
	},
	"Mappings": {
		"RHELRegionMap" : {
			"ap-south-1" :  {"AMI": "ami-e60e5a89" },
			"eu-west-2" :  {"AMI": "ami-c1d2caa5" },
			"eu-west-1" :  {"AMI": "ami-c90195b0" },
			"ap-northeast-2" :  {"AMI": "ami-26f75748" },
			"ap-northeast-1" :  {"AMI": "ami-eb50cd8d" },
			"sa-east-1" :  {"AMI": "ami-0e88cb62" },
			"ca-central-1" :  {"AMI": "ami-c1cb4ea5" },
			"ap-southeast-1" :  {"AMI": "ami-5ae89f26" },
			"ap-southeast-2" :  {"AMI": "ami-1987757b" },
			"eu-central-1" :  {"AMI": "ami-194cdc76" },
			"us-east-1" :  {"AMI": "ami-26ebbc5c" },
			"us-east-2" :  {"AMI": "ami-0b1e356e" },
			"us-west-1" :  {"AMI": "ami-77a2a317" },
			"us-west-2" :  {"AMI": "ami-223f945a" }
		}
	},
	"Conditions" : {
		"ConfRoute53" : {"Fn::Equals" : [{"Ref" : "ConfigureRoute53"}, "true"]},
		"ConfLetsEncrypt" : {"Fn::Equals" : [{"Ref" : "APIExplorerLetsEncryptCert"}, "true"]}
	},
  "Resources": {
    "NewVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },



	"APIExplorerElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "NewPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {"Ref": "NewVPC"},
        "AvailabilityZone": "",
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn": [ "NewVPC" ]
    },

    "igweb": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },

    "DHCPOptions1": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {"Fn::Join" : [ "", [ { "Ref" : "AWS::Region" }, ".compute.internal" ] ] }, 
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "aclb765d6d2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb059a2460": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb049a2461": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },


    "APIExplorerNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "API Explorer Network Interface",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.55",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgAPIExplorer"}],
        "Tags": [{"Key": "Name","Value": "APIExplorer Intf"}]
      },
      "DependsOn": [ "sgAPIExplorer" ]
    },

    "APIExplorerEIPAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "APIExplorerElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "APIExplorerNetworkInterface" }
       },
       "DependsOn": [ "APIExplorerNetworkInterface", "APIExplorerElasticIP", "gw1" ]
    },

	"sgAPIExplorer": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "API Explorer",
			"VpcId": {"Ref": "NewVPC"},
			"SecurityGroupIngress": [
				{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				},
				{
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				}
			],
			"SecurityGroupEgress" : [
			  {
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			  }
			]
		}
	},

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "InternetGatewayId": {"Ref": "igweb"}
      }
    },

    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "rtb049a2461"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb059a2460"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb049a2461"},
        "GatewayId": {"Ref": "igweb"}
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "DhcpOptionsId": {"Ref": "DHCPOptions1"}
      }
    },

     "APIExplorerLinuxInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "RHELRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.medium",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "API Explorer VM" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "APIExplorerNetworkInterface"},
            "DeviceIndex": 0
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#! /bin/bash\n",
			"sleep 2s\n",
			"yum install -y wget\n",
			"export DOWNLOADSCRIPT=\"",{"Ref" : "APIExplorerScriptURL" },"\"\n",
			"export APPFQDN=\"",{ "Fn::Join" : [ "", [ {"Ref" : "APIExplorerHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] },"\"\n",
			"export APPEIP=\"",{"Ref" : "APIExplorerElasticIP" },"\"\n",
			"export PACKAGE=\"",{"Ref" : "APIExplorerPackageURL" },"\"\n",
			"export APIEXPREPO=\"",{"Ref" : "APIExplorerGitHubRepo" },"\"\n",
			"export ADMINPWD=\"",{"Ref" : "AdminPassword" },"\"\n",
			"export AWSREGION=\"",{ "Ref" : "AWS::Region" },"\"\n",
			"export APIEXPLORERLETSENCRYPTCERT=\"",{ "Ref" : "APIExplorerLetsEncryptCert" },"\"\n",
			"export LETSENCRYPTEMAIL=\"",{ "Ref" : "LetsEncryptEmail" },"\"\n",
			"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '%{rhel}').noarch.rpm\n",
			"yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n",
			"yum -y install python36u-devel\n",
			"sleep 2s\n",
			"yum -y install python36u-pip\n",
			"wget -O /opt/apiexplorer.tar.gz ${PACKAGE}\n",			
            "wget -O - ${DOWNLOADSCRIPT} | /bin/bash\n"
          ]]}
        }		
	  },
      "DependsOn": [ "NewPublicSubnet", "sgAPIExplorer", "APIExplorerElasticIP" ]
    },

   "APIExplorerFQDN" : {
      "Type" : "AWS::Route53::RecordSet",
	  "Condition" : "ConfRoute53",
      "Properties" : {
         "HostedZoneName" : {"Fn::Join" : [ "", [ { "Ref" : "AppHostedZone" }, "." ] ] },
         "Comment" : "DNS name for API Explorer",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "APIExplorerHostname"}, ".",
               {"Ref" : "AppHostedZone"}, "."
            ] ]
         },
         "Type" : "A",
         "TTL" : "300",
         "ResourceRecords" : [
             { "Ref" : "APIExplorerElasticIP" }
         ]
      },
	  "DependsOn": [ "APIExplorerElasticIP" ]
   }
  },

  "Outputs": {
    "APIExplorerAppURL": {
      "Description": "API Explorer URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Fn::Join" : [ "", [ {"Ref" : "APIExplorerHostname"}, ".", {"Ref" : "AppHostedZone"} ] ] }
      ]]}
    }
  }
}
